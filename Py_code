import os
import re
import pytesseract
import pandas as pd
import pdfplumber
from pdf2image import convert_from_path
from PIL import Image

#  Set Tesseract path (change this to your system path)
pytesseract.pytesseract.tesseract_cmd = "/opt/homebrew/bin/tesseract"

#  Input PDFs
pdf_files = [
    "/Users/abhinavsingh/Desktop/scoreme/test3 (1) (1).pdf",
    "/Users/abhinavsingh/Desktop/scoreme/test6 (1) (1).pdf"
]

output_excel = "/Users/abhinavsingh/Desktop/scoreme/final_transactions.xlsx"
output_folder = "/Users/abhinavsingh/Desktop/scoreme"
os.makedirs(output_folder, exist_ok=True)

#  OCR fallback
def extract_text_from_pdf(pdf_path):
    images = convert_from_path(pdf_path, dpi=300)
    all_text = ""
    for i, image in enumerate(images):
        text = pytesseract.image_to_string(image, config='--psm 6')
        print(f"\n📄 OCR Preview Page {i+1}:\n{text[:500]}...\n")
        all_text += text + "\n"
    return all_text

#  Save raw text
def save_raw_text(pdf_path, text):
    raw_path = pdf_path.replace(".pdf", "_raw.txt")
    with open(raw_path, "w") as f:
        f.write(text)
    print(f"[📄] Raw text saved to: {raw_path}")

#  Punjab & Sind Bank parser
def parse_punjab_sind(text):
    pattern = re.compile(
        r"(\d{2}\.\w{3}\.\d{4})\s+(\d{2}\.\w{3}\.\d{4})\s+([A-Z0-9]{10,})\s+(.+?)\s+([DC])\s+([\d,]+\.\d{2})",
        re.IGNORECASE
    )
    txns = []
    for line in text.splitlines():
        match = pattern.search(line)
        if match:
            txns.append({
                "Transaction Date": match.group(1),
                "Value Date": match.group(2),
                "Transaction Ref": match.group(3),
                "Details": match.group(4).strip(),
                "D/C": match.group(5),
                "Amount": float(match.group(6).replace(",", ""))
            })
    return txns

#  Standard Chartered parser
def parse_standard_chartered(text):
    lines = text.splitlines()
    merged_lines = []
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if re.match(r'\d{2}-[A-Za-z]{3}-\d{4}', line):
            if i + 1 < len(lines):
                next_line = lines[i + 1].strip()
                if re.search(r'\d{1,3}(?:,\d{3})*\.\d{2}', next_line):
                    line += " " + next_line
                    i += 1
            merged_lines.append(line)
        i += 1

    pattern = re.compile(
        r'(?P<date>\d{2}-[A-Za-z]{3}-\d{4})\s+[TC]\s+(?P<description>.*?)\s+(?P<amount>[,\d]+\.\d{2})\s+(?P<balance>[,\d]+\.\d{2}Dr?)',
        re.IGNORECASE
    )
    txns = []
    for line in merged_lines:
        match = pattern.search(line)
        if match:
            txns.append({
                'Date': match.group('date'),
                'Description': match.group('description').strip(),
                'Amount': match.group('amount').replace(',', ''),
                'Balance': match.group('balance').replace(',', '').replace('Dr', '')
            })
    return txns

#  Generic Table Extractor using pdfplumber
def parse_with_pdfplumber(pdf_path):
    all_dataframes = []
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            tables = page.extract_tables()
            for table in tables:
                if not table or len(table) < 2:
                    continue
                headers = table[0]
                rows = table[1:]
                df = pd.DataFrame(rows, columns=headers)
                all_dataframes.append(df)
    if all_dataframes:
        combined_df = pd.concat(all_dataframes, ignore_index=True)
        return combined_df
    return pd.DataFrame()

#  Format detector
def detect_and_parse(pdf_path, text):
    save_raw_text(pdf_path, text)

    psb_txns = parse_punjab_sind(text)
    if psb_txns:
        return pd.DataFrame(psb_txns), "Punjab & Sind"

    scb_txns = parse_standard_chartered(text)
    if scb_txns:
        return pd.DataFrame(scb_txns), "Standard Chartered"

    # Fallback: Try table extraction
    df = parse_with_pdfplumber(pdf_path)
    if not df.empty:
        return df, "Generic Table"

    return pd.DataFrame(), "Unknown"

# === MAIN SCRIPT ===
writer = pd.ExcelWriter(output_excel, engine='openpyxl')

for pdf_path in pdf_files:
    print(f"\n Processing: {os.path.basename(pdf_path)}")
    text = extract_text_from_pdf(pdf_path)
    df, bank_type = detect_and_parse(pdf_path, text)

    if not df.empty:
        sheet_name = os.path.splitext(os.path.basename(pdf_path))[0][:31]  # Excel sheet name max 31 chars
        df.to_excel(writer, sheet_name=sheet_name, index=False)
        print(f"[✅] Parsed as {bank_type} — Added to Excel: {sheet_name}")
    else:
        print(f"[⚠️] No usable data found for: {pdf_path}")

writer._save()
print(f"\n💾 Final Excel saved to: {output_excel}")
